class DSU{
private:
    vector<int> parent;
    vector<int> rank;
    vector<int> size;
    
public:
    DSU(const int& N){
        size.resize(N + 1, 1);
        rank.resize(N + 1, 0);
        parent.resize(N + 1);
        iota(parent.begin(), parent.end(), 0);
    }
    
    int find(int x){
        if(x != parent[x]){
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    
    void join(int x, int y){
        int x_root = find(x);
        int y_root = find(y);
        if(x_root != y_root){
            if(rank[x_root] <= rank[y_root]){
                parent[x_root] = y_root;
                size[y_root] += size[x_root];
            }else{
                parent[y_root] = x_root;
                size[x_root] += size[y_root];
            }
            if(rank[x_root] == rank[y_root]){
                rank[y_root] += 1;
            }
        }
    }
    
    int get_size(int x){
        return size[find(x)];
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        const int N = graph.size();
        vector<int> infection_src(initial.begin(), initial.end());
        
        DSU dsu(N);
        for(int i = 0; i < N; ++i){
            for(int j = 0; j < N; ++j){
                if(graph[i][j]){
                    dsu.join(i, j);
                }
            }
        }
        
        vector<int> root_cnt(N, 0);
        for(int infected_src_node: infection_src){
            root_cnt[dsu.find(infected_src_node)] += 1;
        }
        
        int best_node_to_cure = N + 1;
        int best_cc_size = -1;
        // select the infected_src_node which is the single infection src in his cc (connected component)
        // if multiple nodes satisfy this condition then select the infected_src_node with the max cc size (to save max nodes from infection)
        //                                                                            and minimum index
        for(int infected_src_node: infection_src){
            if(root_cnt[dsu.find(infected_src_node)] == 1){
                if(dsu.get_size(infected_src_node) > best_cc_size){
                    best_node_to_cure = infected_src_node;
                    best_cc_size = dsu.get_size(infected_src_node);
                }else if(dsu.get_size(infected_src_node) == best_cc_size){
                    best_node_to_cure = min(infected_src_node, best_node_to_cure);
                }
            }
        }
        
        // if all the infected connected components contain more than one infected_src_node then you cannot save other nodes from infection
        // in this case, select the minimum infected_src_node
        if(best_node_to_cure == N + 1){
            best_node_to_cure = *min_element(infection_src.begin(), infection_src.end());
        }
        
        return best_node_to_cure;
    }
};