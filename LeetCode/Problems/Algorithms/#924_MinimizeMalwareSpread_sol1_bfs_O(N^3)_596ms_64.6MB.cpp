class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        const int N = graph.size();
        
        int best_node_to_cure = N + 1;
        int min_infected_nodes = N + 1;
        for(int cured_node: initial){
            queue<int> q;
            vector<bool> is_infected(N, false);
            for(int node: initial){
                if(node != cured_node){
                    q.push(node);
                    is_infected[node] = true;
                }
            }
            
            int infected_nodes = 0;
            while(!q.empty()){
                int node = q.front();
                q.pop();
                infected_nodes += 1;
                for(int next_node = 0; next_node < N; ++next_node){
                    if(graph[node][next_node] && !is_infected[next_node]){
                        q.push(next_node);
                        is_infected[next_node] = true;
                    }
                }
            }
            
            if(infected_nodes < min_infected_nodes){
                min_infected_nodes = infected_nodes;
                best_node_to_cure = cured_node;
            }else if(infected_nodes == min_infected_nodes){
                best_node_to_cure = min(cured_node, best_node_to_cure);
            }
        }
        
        return best_node_to_cure;
    }
};