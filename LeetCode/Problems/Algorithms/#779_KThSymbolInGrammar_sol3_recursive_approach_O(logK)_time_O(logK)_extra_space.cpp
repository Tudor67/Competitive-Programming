class Solution {
public:
    int kthGrammar(int n, int k) {
        if(k == 1){
            // Case 1: base case when k == 1 => return 0
            return 0;
        }
        if(k % 2 == 1){
            // Case 2: (k % 2 == 1)
            //         kth symbol is the first symbol of '01' or '10' (which is generated by the previous ((k + 1) / 2)th symbol)
            //         if kth symbol is 0, it is generated from 0 (i.e., ((k + 1) / 2)th symbol is 0)
            //         if kth symbol is 1, it is generated from 1 (i.e., ((k + 1) / 2)th symbol is 1)
            //         the main idea is that kth symbol is the same as ((k + 1) / 2)th symbol => return kthGrammar(n, (k + 1) / 2)
            return kthGrammar(n, (k + 1) / 2);
        }
        // Case 3: (k % 2 == 0)
        //         kth symbol is the second symbol of '01' or '10' (which is generated by the previous (k / 2)th symbol)
        //         if kth symbol is 0, it is generated from 1 (i.e., (k / 2)th symbol is 1)
        //         if kth symbol is 1, it is generated from 0 (i.e., (k / 2)th symbol is 0)
        //         the main idea is that kth symbol is different from (k / 2)th symbol => return !kthGrammar(n, k / 2)
        return !kthGrammar(n, k / 2);
    }
};